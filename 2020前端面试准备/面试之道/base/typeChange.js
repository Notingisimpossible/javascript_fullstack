// 类型转换

// 明确知道在js中，类型转换只有三种情况，分别是：
// 1. 转换为布尔值
// 2. 转换数字
// 3. 转换为字符串

// https://www.cnblogs.com/jc2182/p/11582448.html（js类型转换表）

// 转Boolean的情况，除了 undefined, null, false, NaN, '',  0, -0, 其他所有的值都转为true,包括对象

// 对象转为原始类型
// 对象在转换类型时，会调用内置的[[ToPrimitive]]函数，对于该函数来说，转换类型的算法逻辑如下
  // - 如果已经是原始类型，那就不用转换
  // - 调用x.valueOf(), 如果转换为基础类型，就返回转换的值
  // - 调用x.toString(), 如果转换为基础类型，就返回转换的值
  // - 如果没有返回原始对象，就会报错

let a = {
  valueOf() {
    return 0
  },
  toString() {
    return '1'
  },
  [Symbol.toPrimitive] () {
    return 2
  }
}

// a + a // 3

// 四则运算中加法的特点：
// 1. 运算中存在一方字符串，那么就会把其他方转换为字符换相加
// 2. 如果一方不是字符串或数字，那么将它转换为数字或者字符串相加
// 1 + '1' === '11'
// true + true === 2
// 4 + [1,2, 3] === "41,2,3"
// 'a' + + 'b' => 'a' + (+'b') // aNaN

// 除了加法运算符，其他的只要有一方是数字，另一方就会被转换为数字
//  4 * '3' // 12
// 4 * [] // 0
// 4 * [1, 2] // NaN

// 比较运算
// 1. 如果是对象，就通过toPromitive 转换对象
// 2. 如果是字符串，就通过unicode 字符索引来比较

 let foo = {
  valueOf() {
    return 0
  },
  toString() {
    return '1'
  }
 }

 foo > -1 // true
